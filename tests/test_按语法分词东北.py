import pytest

from rply import 分词器母机, 语法分析器母机


标识符模式 = r'[_a-zA-Z\u4e00-\u9fa5][_a-zA-Z0-9\u4e00-\u9fa5]*'
class Test按语法分词东北(object):

    def test_一句东北(self):
        分词母机 = 分词器母机()
        分词母机.添了('装', '装')
        分词母机.添了('二', '二')
        分词母机.添了('句号', '。')
        分词母机.添了('标识符', 标识符模式)

        分析器母机 = 语法分析器母机(['装', '标识符', '句号', '二'])

        @分析器母机.语法规则("代码 : 各句 句号")
        def 各句(片段):
            return 片段[0]

        @分析器母机.语法规则("各句 : 句")
        @分析器母机.语法规则("各句 : 各句 句号 句")
        def 各句(片段):
            if len(片段) == 1:
                return f"{片段[0]};"
            if len(片段) == 3:
                return f"{片段[0]} {片段[2]}"

        @分析器母机.语法规则("句 : 变量")
        def 句(片段):
            return 片段[0]

        @分析器母机.语法规则("变量 : 标识符 装 二")
        def 变量(片段):
            return f"{片段[0].getstr()}=2"

        分词器 = 分词母机.产出()
        分析器 = 分析器母机.产出()

        assert 分析器.按语法分词(分词器.分词('老装二。')) == '老=2;'


    def test_两句东北(self):
        分词母机 = 分词器母机()
        分词母机.添了('嘀咕', '嘀咕')
        分词母机.添了('装', '装')
        分词母机.添了('二', '二')
        分词母机.添了('句号', '。')
        分词母机.添了('冒号', '：')
        分词母机.添了('标识符', 标识符模式)

        分析器母机 = 语法分析器母机(['嘀咕', '装', '标识符', '句号', '冒号', '二'])

        @分析器母机.语法规则("代码 : 各句 句号")
        def 各句(片段):
            return 片段[0] + ';'

        @分析器母机.语法规则("各句 : 句")
        @分析器母机.语法规则("各句 : 各句 句号 句")
        def 各句(片段):
            if len(片段) == 1:
                return f"{片段[0]};"
            if len(片段) == 3:
                return f"{片段[0]} {片段[2]}"

        @分析器母机.语法规则("句 : 变量 | 输出")
        def 句(片段):
            return 片段[0]

        @分析器母机.语法规则("变量 : 标识符 装 二")
        def 变量(片段):
            return f"{片段[0].getstr()}=2"

        @分析器母机.语法规则("输出 : 嘀咕 冒号 标识符")
        def 输出(片段):
            return f"print({片段[2].getstr()})"

        分词器 = 分词母机.产出()
        分析器 = 分析器母机.产出()

        assert 分析器.按语法分词(分词器.分词('老嘀咕装二。嘀咕：老嘀咕。')) == '老嘀咕=2; print(老嘀咕);'
        assert 分析器.按语法分词(分词器.分词('装嘀咕装二。嘀咕：装嘀咕。')) == '装嘀咕=2; print(装嘀咕);'