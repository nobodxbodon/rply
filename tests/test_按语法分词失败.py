import py

from rply import 分词器母机, 语法分析器母机
from rply.报错 import 分词报错, 按语法分词报错


标识符模式 = r'[_a-zA-Z\u4e00-\u9fa5][_a-zA-Z0-9\u4e00-\u9fa5]*'
class Test按语法分词失败(object):

    def test_创建单列表(self):
        分词母机 = 分词器母机()
        分词母机.添了('创建', '创建')
        分词母机.添了('表', '表')
        分词母机.添了('为', '为')
        分词母机.添了('整数', '整数')
        分词母机.添了('逗号', '，')
        分词母机.添了('标识符', 标识符模式)

        分析器母机 = 语法分析器母机(['创建', '表', '为', '整数', '逗号', '标识符'])

        @分析器母机.语法规则("建表 : 表声明 各列声明")
        def 建表(片段):
            return f"{片段[0]} 各列为 {片段[2]}"

        @分析器母机.语法规则("各列声明 : 列声明")
        @分析器母机.语法规则("各列声明 : 各列声明 逗号 列声明")
        def 各列声明(片段):
            return f"{片段[0]}" if len(片段) == 1 else f"{片段[0]} {片段[2]}"

        @分析器母机.语法规则("表声明 : 创建 标识符 表")
        def 表声明(片段):
            return 片段[1].getstr()

        @分析器母机.语法规则("列声明 : 标识符 为 列类型")
        def 列声明(片段):
            return 片段[0].getstr() + " " + 片段[2]

        @分析器母机.语法规则("列类型 : 整数")
        def 列类型(片段):
            return 片段[0].getstr()

        分词器 = 分词母机.产出(); 分析器 = 分析器母机.产出()

        with py.test.raises(按语法分词报错) as exc_info:
            分析器.按语法分词(分词器.分词('创建读者表，出生年为整数'))

        assert exc_info.value.最长路径 == [(0, '创建'), (2, '标识符'), (5, '逗号')]
